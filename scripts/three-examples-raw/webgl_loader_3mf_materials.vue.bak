<template>
    <ThreeExampleLayout title="webgl_loader_3mf_materials">
        <platform-canvas
                type="webgl2"
                id="webgl_loader_3mf_materials"
                 use-in-example
      @exampleInit="exampleInit"
        >
        </platform-canvas>
        <template v-slot:info>

            <view class="a-link" @tap="linkHandle" data-href="https://threejs.org">three.js</view>
            -
            <view class="a-link" @tap="linkHandle" data-href="http://3mf.io">3MF</view>
            file with materials

        </template>
    </ThreeExampleLayout>
</template>

<script setup>
import * as THREE from '@/package-three/setup';
import {  linkHandle } from '@/helpers/example-helper';
import ThreeExampleLayout from '@/components/ThreeExampleLayout.vue';
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js"
import { ThreeMFLoader } from "three/examples/jsm/loaders/3MFLoader.js"
import { hookLoaderLoadFn } from '@/helpers/analyzer';

//for analysis
hookLoaderLoadFn([
  ThreeMFLoader
]);

const exampleInit = (({ window, canvas, GUI, Stats, needToDispose, useFrame }) => {
    let camera, scene, renderer;

    init();

    function init() {

      scene = new THREE.Scene();
      scene.background = new THREE.Color(0xa0a0a0);
      scene.fog = new THREE.Fog(0xa0a0a0, 10, 500);

      camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 500);
      camera.position.set(-50, 40, 50);
      scene.add(camera);

      //

      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x8d8d8d, 3);
      hemiLight.position.set(0, 100, 0);
      scene.add(hemiLight);

      const dirLight = new THREE.DirectionalLight(0xffffff, 3);
      dirLight.position.set(-0, 40, 50);
      dirLight.castShadow = true;
      dirLight.shadow.camera.top = 50;
      dirLight.shadow.camera.bottom = -25;
      dirLight.shadow.camera.left = -25;
      dirLight.shadow.camera.right = 25;
      dirLight.shadow.camera.near = 0.1;
      dirLight.shadow.camera.far = 200;
      dirLight.shadow.mapSize.set(1024, 1024);
      scene.add(dirLight);

      // scene.add( new THREE.CameraHelper( dirLight.shadow.camera ) );

      //


      const loader = new ThreeMFLoader();
      loader.load('./models/3mf/truck.3mf', function (object) {

        object.rotation.set(-Math.PI / 2, 0, 0); // z-up conversion

        object.traverse(function (child) {

          child.castShadow = true;

        });

        scene.add(object);

      });

      //
      THREE.DefaultLoadingManager.onLoad = () => {
        render()
      }

      //

      const ground = new THREE.Mesh(new THREE.PlaneGeometry(1000, 1000), new THREE.MeshPhongMaterial({ color: 0xcbcbcb, depthWrite: false }));
      ground.rotation.x = -Math.PI / 2;
      ground.position.y = 11;
      ground.receiveShadow = true;
      scene.add(ground);

      //

      renderer = new THREE.WebGLRenderer({ antialias: true, canvas });
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      renderer.shadowMap.type = THREE.PCFSoftShadowMap;
      ;

      //

      const controls = new OrbitControls(camera, renderer.domElement);
      controls.addEventListener('change', render);
      controls.minDistance = 50;
      controls.maxDistance = 200;
      controls.enablePan = false;
      controls.target.set(0, 20, 0);
      controls.update();

      window.addEventListener('resize', onWindowResize);

      render();

      needToDispose(renderer, scene, loader, controls, {
        onDispose() {
          THREE.DefaultLoadingManager.onLoad = null
        }
      })
    }

    function onWindowResize() {

      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();

      renderer.setSize(window.innerWidth, window.innerHeight);

      render();

    }

    function render() {

      renderer.render(scene, camera);

    }


  }
);
</script>
